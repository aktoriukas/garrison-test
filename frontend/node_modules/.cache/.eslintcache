[{"/home/aktoriukas/Documents/garrison-test/frontend/src/index.js":"1","/home/aktoriukas/Documents/garrison-test/frontend/src/App.js":"2","/home/aktoriukas/Documents/garrison-test/frontend/src/reducers/index.js":"3","/home/aktoriukas/Documents/garrison-test/frontend/src/components/PostsTeasers.js":"4","/home/aktoriukas/Documents/garrison-test/frontend/src/components/PostForm.js":"5","/home/aktoriukas/Documents/garrison-test/frontend/src/components/FullPost.js":"6","/home/aktoriukas/Documents/garrison-test/frontend/src/actions/index.js":"7","/home/aktoriukas/Documents/garrison-test/frontend/src/reducers/categories.js":"8","/home/aktoriukas/Documents/garrison-test/frontend/src/reducers/comments.js":"9","/home/aktoriukas/Documents/garrison-test/frontend/src/reducers/posts.js":"10","/home/aktoriukas/Documents/garrison-test/frontend/src/API-calls/index.js":"11","/home/aktoriukas/Documents/garrison-test/frontend/src/components/Post.js":"12","/home/aktoriukas/Documents/garrison-test/frontend/src/components/Vote.js":"13","/home/aktoriukas/Documents/garrison-test/frontend/src/components/CommentForm.js":"14","/home/aktoriukas/Documents/garrison-test/frontend/src/components/Comment.js":"15","/home/aktoriukas/Documents/garrison-test/frontend/src/components/Nav.js":"16"},{"size":600,"mtime":1618585024348,"results":"17","hashOfConfig":"18"},{"size":1108,"mtime":1618755011576,"results":"19","hashOfConfig":"18"},{"size":209,"mtime":1618671946483,"results":"20","hashOfConfig":"18"},{"size":1944,"mtime":1618758843525,"results":"21","hashOfConfig":"18"},{"size":1919,"mtime":1618752819602,"results":"22","hashOfConfig":"18"},{"size":4778,"mtime":1618754732944,"results":"23","hashOfConfig":"18"},{"size":676,"mtime":1618747724561,"results":"24","hashOfConfig":"18"},{"size":315,"mtime":1618752739222,"results":"25","hashOfConfig":"18"},{"size":2262,"mtime":1618687515457,"results":"26","hashOfConfig":"18"},{"size":2972,"mtime":1618752734010,"results":"27","hashOfConfig":"18"},{"size":4418,"mtime":1618746170333,"results":"28","hashOfConfig":"18"},{"size":2972,"mtime":1618754702228,"results":"29","hashOfConfig":"18"},{"size":398,"mtime":1618750951584,"results":"30","hashOfConfig":"18"},{"size":1285,"mtime":1618754234098,"results":"31","hashOfConfig":"18"},{"size":1161,"mtime":1618752098920,"results":"32","hashOfConfig":"18"},{"size":563,"mtime":1618758734045,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1lwd984",{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/aktoriukas/Documents/garrison-test/frontend/src/index.js",[],["71","72"],"/home/aktoriukas/Documents/garrison-test/frontend/src/App.js",["73","74"],"/home/aktoriukas/Documents/garrison-test/frontend/src/reducers/index.js",[],"/home/aktoriukas/Documents/garrison-test/frontend/src/components/PostsTeasers.js",["75","76","77"],"/home/aktoriukas/Documents/garrison-test/frontend/src/components/PostForm.js",[],"/home/aktoriukas/Documents/garrison-test/frontend/src/components/FullPost.js",["78","79","80"],"/home/aktoriukas/Documents/garrison-test/frontend/src/actions/index.js",[],"/home/aktoriukas/Documents/garrison-test/frontend/src/reducers/categories.js",["81"],"import  { GET_CATEGORIES } from \"../actions\";\n\nexport default (state = [], action) => {\n\n    const { type, categories } = action;\n  \n    switch(type) {\n\n        case GET_CATEGORIES:\n            if(categories) return [...categories]\n            return false\n\n        default:\n            return state\n    }\n  \n  }\n  ","/home/aktoriukas/Documents/garrison-test/frontend/src/reducers/comments.js",["82","83","84"],"import  { \n    RECEIVE_COMMENTS,\n    ADD_COMMENT,\n    DOWNVOTE_COMMENT,\n    DELETE_COMMENT,\n    UPDATE_COMMENT,\n    UPVOTE_COMMENT } from \"../actions\";\n\nimport { api_voteComment, api_deleteComment, api_updateComment, api_addComment } from '../API-calls'\n\n\nexport default (state = [], action) => {\n\n    const { comments, comment, type, id, body, timestamp, newComment } = action;\n  \n    switch(type) {\n\n        // UPDATE COMMENTS ===========================================\n  \n        case RECEIVE_COMMENTS:\n  \n            return [ ...comments]\n  \n        case ADD_COMMENT:\n\n            if(api_addComment(newComment)){\n                \n                return [...state, newComment]\n            }\n\n\n        // VOTE COMMENT ===============================================\n  \n        case DOWNVOTE_COMMENT:\n            if(api_voteComment(id, 'downVote')){\n                return state.map(comment => {\n                    if( comment.id === id ) comment.voteScore--\n                    return comment\n                })\n            }else {\n                return state\n            }\n\n  \n        case UPVOTE_COMMENT:\n            if(api_voteComment(id, 'upVote')){\n                return state.map(comment => {\n                    if( comment.id === id ) comment.voteScore++\n                    return comment\n                })\n            }else{\n                return state\n            }\n\n        \n        // EDIT COMMENT ================================================\n\n        case DELETE_COMMENT:\n\n            if(api_deleteComment(id)){\n                return state.map(comment => {\n                    if(comment.id === id){\n                        comment.deleted = true\n                    }\n                    return comment\n                })\n            }else{\n                return state\n            }\n\n        case UPDATE_COMMENT:\n\n            if(api_updateComment(id, body, timestamp)){\n                return state.map(comment => {\n                    if(comment.id === id){\n                        comment.body = body;\n                        comment.timestamp = timestamp;\n                    }\n                    return comment\n                })\n            }\n\n            return state\n\n        default:\n            return state\n    }\n  \n  }\n  ","/home/aktoriukas/Documents/garrison-test/frontend/src/reducers/posts.js",["85","86"],"import { \n    RECEIVE_POSTS, \n    ADD_POST,\n    UPVOTE_POST,\n    DELETE_POST,\n    UPDATE_POST,\n    DOWNVOTE_POST,\n    SORT_POSTS } from \"../actions\";\n  \nimport { api_votePost, api_deletePost, api_updatePost, api_addPost } from '../API-calls'\n\nexport default (state = [], action) => {\n\n    const { posts, type, post, id, title, body, sort } = action;\n  \n    switch (type) {\n\n        // UPDATE POSTS ===========================================\n  \n        case RECEIVE_POSTS:\n            if(posts) return [ ...posts ];\n            return false\n  \n        case ADD_POST:\n            if(api_addPost(post)){\n                return [...state, post]\n            }else {\n                return state\n            }\n\n        // SORT POSTS ===========================================\n\n        case SORT_POSTS:\n\n            switch(sort){\n                case '-':\n                    return state\n                case 'score':\n                    state.sort((a,b) => {\n                        if(a.voteScore < b.voteScore) return 1\n                        if(a.voteScore > b.voteScore) return -1\n                        return 0\n                    })\n                    return state\n\n                case 'date':\n                    state.sort((a,b) => {\n                        if(a.timestamp < b.timestamp) return 1\n                        if(a.timestamp > b.timestamp) return -1\n                        return 0\n                    })\n\n                default:\n                    return state\n            }\n\n        // VOTE POST ===============================================\n\n        case DOWNVOTE_POST:\n\n            if(api_votePost(id, 'downVote')){\n                return state.map(post => {\n                    if( post.id === id ) post.voteScore--\n                    return post\n                })\n            }else{\n                return state\n            }\n\n    \n        case UPVOTE_POST:\n\n            if(api_votePost(id, 'upVote')){\n                return state.map(post => {\n                    if( post.id === id ) post.voteScore++\n                    return post\n                })\n            }else{\n                return state\n            }\n\n\n        // EDIT POST ================================================\n\n        case DELETE_POST:\n\n            if(api_deletePost(id)){\n                return state.map(post => {\n                    if(post.id === id){\n                        post.deleted = true\n                    }\n                    return post\n                })\n            }else{\n                return state\n            }\n\n    \n        case UPDATE_POST:\n\n            if(api_updatePost(id, title, body)){\n                return state.map(post => {\n                    if(post.id === id){\n                        post.body = body;\n                        post.title = title;\n                    }\n                    return post\n                })\n            }\n\n            return state\n  \n        default:\n            return state;\n    }\n  };\n  ","/home/aktoriukas/Documents/garrison-test/frontend/src/API-calls/index.js",["87"],"import axios from 'axios'\n\n\nconst url = \"http://localhost:3001\";\nconst authorization = { Authorization: \"garrison\" }\n\nexport const api_getAllPosts = async () => {\n\n    try{\n        const params = {\n            headers: authorization\n        }\n    \n        const response = await axios.get(`${url}/posts`, params)\n        return [...response.data]\n\n    }catch (err) {console.log(err)}\n} \n\nexport const api_getCategories = async () => {\n    try{\n        const params = {\n            headers: authorization\n        }\n        const response = await axios.get(`${url}/categories`, params)\n        return [...response.data.categories]\n    }catch (err) {console.log(err)}\n}\n\nexport const api_getPostByCategory = async (category) => {\n    try{\n        const params = {\n            headers: authorization\n        }\n        const response = await axios.get(`${url}/${category}/posts`, params)\n        return [...response.data]\n    }catch (err) {console.log(err)}\n}\n\nexport const api_getSinglePost = async (id) => {\n\n    try{\n        const params = {\n            headers: authorization\n        }\n    \n        const response = await axios.get(`${url}/posts/${id}`, params)\n        return response.data\n    }\n    catch (err) {console.log(err)}\n\n}\n\nexport const api_getComments = async (id) => {\n\n    try{\n        const params = {\n            headers: authorization\n        }\n        const response = await axios.get(`${url}/posts/${id}/comments`, params)\n        return [...response.data]        \n    }\n    catch (err) { console.log(err) }\n\n}\n\nexport const api_addComment = async ({id, timestamp, body, author, parentId}) => {\n\n    try{\n        const response = await axios({\n            method: 'post',\n            url:`${url}/comments`,\n            headers: authorization,\n            data: {\n                id, \n                timestamp, \n                body, \n                author, \n                parentId}\n        })\n        console.log(response)\n        return response\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_votePost = async (id, action) => {\n\n    try{\n        const response = await axios({\n            method: 'post',\n            url:`${url}/posts/${id}`,\n            headers: authorization,\n            data: { option: action }\n        })\n        return response\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_voteComment = async (id, action) => {\n\n    try{\n        const response = await axios({\n            method: 'post',\n            url:`${url}/comments/${id}`,\n            headers: authorization,\n            data: { option: action }\n        })\n        return response\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_deleteComment = async (id) => {\n\n    try{\n        const response = await axios({\n            method: 'delete',\n            url:`${url}/comments/${id}`,\n            headers: authorization\n        })\n        return response\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_updateComment = async (id, body, timestamp) => {\n\n    try{\n        console.log(id)\n        console.log(body)\n        console.log(timestamp)\n        const response = await axios({\n            method: 'put',\n            url:`${url}/comments/${id}`,\n            headers: authorization,\n            data:{body, timestamp}\n        })\n        console.log(response)\n        return response\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_deletePost = async (id) => {\n\n    try{\n        const response = await axios({\n            method: 'delete',\n            url:`${url}/posts/${id}`,\n            headers: authorization\n        })\n        return response\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_updatePost = async (id, title, body) => {\n\n    try{\n        const response = await axios({\n            method: 'put',\n            url: `${url}/posts/${id}`,\n            headers: authorization,\n            data: { title, body}\n        })\n        return response\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_addPost = async ( { id, timestamp, title, body, author, category } ) => {\n\n    try{\n\n        const response = await axios({\n            method: 'post',\n            url: `${url}/posts`,\n            headers: authorization,\n            data: {\n                id,\n                timestamp,\n                title,\n                body,\n                author,\n                category\n            }\n        })\n\n    }catch (err) {console.log(err)}\n}","/home/aktoriukas/Documents/garrison-test/frontend/src/components/Post.js",["88","89"],"/home/aktoriukas/Documents/garrison-test/frontend/src/components/Vote.js",[],"/home/aktoriukas/Documents/garrison-test/frontend/src/components/CommentForm.js",["90"],"/home/aktoriukas/Documents/garrison-test/frontend/src/components/Comment.js",[],"/home/aktoriukas/Documents/garrison-test/frontend/src/components/Nav.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":2,"column":50,"nodeType":"97","messageId":"98","endLine":2,"endColumn":54},{"ruleId":"99","severity":1,"message":"100","line":20,"column":6,"nodeType":"101","endLine":20,"endColumn":8,"suggestions":"102"},{"ruleId":"95","severity":1,"message":"96","line":2,"column":10,"nodeType":"97","messageId":"98","endLine":2,"endColumn":14},{"ruleId":"99","severity":1,"message":"103","line":23,"column":8,"nodeType":"101","endLine":23,"endColumn":15,"suggestions":"104"},{"ruleId":"99","severity":1,"message":"105","line":27,"column":8,"nodeType":"101","endLine":27,"endColumn":16,"suggestions":"106"},{"ruleId":"95","severity":1,"message":"107","line":3,"column":10,"nodeType":"97","messageId":"98","endLine":3,"endColumn":22},{"ruleId":"99","severity":1,"message":"108","line":47,"column":8,"nodeType":"101","endLine":47,"endColumn":10,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":132,"column":43,"nodeType":"112","messageId":"113","endLine":132,"endColumn":45},{"ruleId":"114","severity":1,"message":"115","line":3,"column":1,"nodeType":"116","endLine":17,"endColumn":4},{"ruleId":"114","severity":1,"message":"115","line":12,"column":1,"nodeType":"116","endLine":89,"endColumn":4},{"ruleId":"95","severity":1,"message":"117","line":14,"column":23,"nodeType":"97","messageId":"98","endLine":14,"endColumn":30},{"ruleId":"118","severity":1,"message":"119","line":34,"column":9,"nodeType":"120","messageId":"121","endLine":42,"endColumn":14},{"ruleId":"114","severity":1,"message":"115","line":12,"column":1,"nodeType":"116","endLine":116,"endColumn":5},{"ruleId":"118","severity":1,"message":"122","line":53,"column":17,"nodeType":"120","messageId":"123","endLine":54,"endColumn":33},{"ruleId":"95","severity":1,"message":"124","line":177,"column":15,"nodeType":"97","messageId":"98","endLine":177,"endColumn":23},{"ruleId":"99","severity":1,"message":"125","line":18,"column":8,"nodeType":"101","endLine":18,"endColumn":10,"suggestions":"126"},{"ruleId":"118","severity":1,"message":"122","line":50,"column":13,"nodeType":"120","messageId":"123","endLine":51,"endColumn":22},{"ruleId":"95","severity":1,"message":"127","line":5,"column":10,"nodeType":"97","messageId":"98","endLine":5,"endColumn":24},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.","ArrayExpression",["130"],"React Hook useEffect has missing dependencies: 'getAllPosts' and 'getCateryPosts'. Either include them or remove the dependency array.",["131"],"React Hook useEffect has a missing dependency: 'sortPosts'. Either include it or remove the dependency array.",["132"],"'api_votePost' is defined but never used.","React Hook useEffect has missing dependencies: 'getComments', 'getSinglePost', 'id', and 'posts'. Either include them or remove the dependency array.",["133"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'comment' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","Expected a 'break' statement before 'default'.","default","'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getComments'. Either include it or remove the dependency array.",["134"],"'api_addComment' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},"Update the dependencies array to be: [getCategories]",{"range":"145","text":"146"},"Update the dependencies array to be: [getAllPosts, getCateryPosts, match]",{"range":"147","text":"148"},"Update the dependencies array to be: [sortBy, sortPosts]",{"range":"149","text":"150"},"Update the dependencies array to be: [getComments, getSinglePost, id, posts]",{"range":"151","text":"152"},"Update the dependencies array to be: [getComments]",{"range":"153","text":"154"},[549,551],"[getCategories]",[676,683],"[getAllPosts, getCateryPosts, match]",[735,743],"[sortBy, sortPosts]",[1357,1359],"[getComments, getSinglePost, id, posts]",[409,411],"[getComments]"]