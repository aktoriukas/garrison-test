{"ast":null,"code":"import { RECEIVE_COMMENTS, ADD_COMMENT, DOWNVOTE_COMMENT, DELETE_COMMENT, UPDATE_COMMENT, UPVOTE_COMMENT } from \"../actions\";\nimport { api_voteComment, api_deleteComment, api_updateComment, api_addComment } from '../API-calls';\nexport default ((state = [], action) => {\n  const {\n    comments,\n    comment,\n    type,\n    id,\n    body,\n    timestamp,\n    newComment\n  } = action;\n\n  switch (type) {\n    // UPDATE COMMENTS ===========================================\n    case RECEIVE_COMMENTS:\n      return [...comments];\n\n    case ADD_COMMENT:\n      if (api_addComment(newComment)) {\n        return [...state, newComment];\n      }\n\n    // VOTE COMMENT ===============================================\n\n    case DOWNVOTE_COMMENT:\n      if (api_voteComment(id, 'downVote')) {\n        return state.map(comment => {\n          if (comment.id === id) comment.voteScore--;\n          return comment;\n        });\n      } else {\n        return state;\n      }\n\n    case UPVOTE_COMMENT:\n      if (api_voteComment(id, 'upVote')) {\n        return state.map(comment => {\n          if (comment.id === id) comment.voteScore++;\n          return comment;\n        });\n      } else {\n        return state;\n      }\n\n    // EDIT COMMENT ================================================\n\n    case DELETE_COMMENT:\n      if (api_deleteComment(id)) {\n        return state.map(comment => {\n          if (comment.id === id) {\n            comment.deleted = true;\n          }\n\n          return comment;\n        });\n      } else {\n        return state;\n      }\n\n    case UPDATE_COMMENT:\n      if (api_updateComment(id, body, timestamp)) {\n        return state.map(comment => {\n          if (comment.id === id) {\n            comment.body = body;\n            comment.timestamp = timestamp;\n          }\n\n          return comment;\n        });\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/aktoriukas/Documents/garrison-test2/frontend/src/reducers/comments.js"],"names":["RECEIVE_COMMENTS","ADD_COMMENT","DOWNVOTE_COMMENT","DELETE_COMMENT","UPDATE_COMMENT","UPVOTE_COMMENT","api_voteComment","api_deleteComment","api_updateComment","api_addComment","state","action","comments","comment","type","id","body","timestamp","newComment","map","voteScore","deleted"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,WAFJ,EAGIC,gBAHJ,EAIIC,cAJJ,EAKIC,cALJ,EAMIC,cANJ,QAM0B,YAN1B;AAQA,SAASC,eAAT,EAA0BC,iBAA1B,EAA6CC,iBAA7C,EAAgEC,cAAhE,QAAsF,cAAtF;AAGA,gBAAe,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAEnC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA,IAArB;AAA2BC,IAAAA,EAA3B;AAA+BC,IAAAA,IAA/B;AAAqCC,IAAAA,SAArC;AAAgDC,IAAAA;AAAhD,MAA+DP,MAArE;;AAEA,UAAOG,IAAP;AAEI;AAEA,SAAKd,gBAAL;AAEI,aAAO,CAAE,GAAGY,QAAL,CAAP;;AAEJ,SAAKX,WAAL;AAEI,UAAGQ,cAAc,CAACS,UAAD,CAAjB,EAA8B;AAE1B,eAAO,CAAC,GAAGR,KAAJ,EAAWQ,UAAX,CAAP;AACH;;AAGL;;AAEA,SAAKhB,gBAAL;AACI,UAAGI,eAAe,CAACS,EAAD,EAAK,UAAL,CAAlB,EAAmC;AAC/B,eAAOL,KAAK,CAACS,GAAN,CAAUN,OAAO,IAAI;AACxB,cAAIA,OAAO,CAACE,EAAR,KAAeA,EAAnB,EAAwBF,OAAO,CAACO,SAAR;AACxB,iBAAOP,OAAP;AACH,SAHM,CAAP;AAIH,OALD,MAKM;AACF,eAAOH,KAAP;AACH;;AAGL,SAAKL,cAAL;AACI,UAAGC,eAAe,CAACS,EAAD,EAAK,QAAL,CAAlB,EAAiC;AAC7B,eAAOL,KAAK,CAACS,GAAN,CAAUN,OAAO,IAAI;AACxB,cAAIA,OAAO,CAACE,EAAR,KAAeA,EAAnB,EAAwBF,OAAO,CAACO,SAAR;AACxB,iBAAOP,OAAP;AACH,SAHM,CAAP;AAIH,OALD,MAKK;AACD,eAAOH,KAAP;AACH;;AAGL;;AAEA,SAAKP,cAAL;AAEI,UAAGI,iBAAiB,CAACQ,EAAD,CAApB,EAAyB;AACrB,eAAOL,KAAK,CAACS,GAAN,CAAUN,OAAO,IAAI;AACxB,cAAGA,OAAO,CAACE,EAAR,KAAeA,EAAlB,EAAqB;AACjBF,YAAAA,OAAO,CAACQ,OAAR,GAAkB,IAAlB;AACH;;AACD,iBAAOR,OAAP;AACH,SALM,CAAP;AAMH,OAPD,MAOK;AACD,eAAOH,KAAP;AACH;;AAEL,SAAKN,cAAL;AAEI,UAAGI,iBAAiB,CAACO,EAAD,EAAKC,IAAL,EAAWC,SAAX,CAApB,EAA0C;AACtC,eAAOP,KAAK,CAACS,GAAN,CAAUN,OAAO,IAAI;AACxB,cAAGA,OAAO,CAACE,EAAR,KAAeA,EAAlB,EAAqB;AACjBF,YAAAA,OAAO,CAACG,IAAR,GAAeA,IAAf;AACAH,YAAAA,OAAO,CAACI,SAAR,GAAoBA,SAApB;AACH;;AACD,iBAAOJ,OAAP;AACH,SANM,CAAP;AAOH;;AAED,aAAOH,KAAP;;AAEJ;AACI,aAAOA,KAAP;AAtER;AAyED,CA7EH","sourcesContent":["import  { \n    RECEIVE_COMMENTS,\n    ADD_COMMENT,\n    DOWNVOTE_COMMENT,\n    DELETE_COMMENT,\n    UPDATE_COMMENT,\n    UPVOTE_COMMENT } from \"../actions\";\n\nimport { api_voteComment, api_deleteComment, api_updateComment, api_addComment } from '../API-calls'\n\n\nexport default (state = [], action) => {\n\n    const { comments, comment, type, id, body, timestamp, newComment } = action;\n  \n    switch(type) {\n\n        // UPDATE COMMENTS ===========================================\n  \n        case RECEIVE_COMMENTS:\n  \n            return [ ...comments]\n  \n        case ADD_COMMENT:\n\n            if(api_addComment(newComment)){\n                \n                return [...state, newComment]\n            }\n\n\n        // VOTE COMMENT ===============================================\n  \n        case DOWNVOTE_COMMENT:\n            if(api_voteComment(id, 'downVote')){\n                return state.map(comment => {\n                    if( comment.id === id ) comment.voteScore--\n                    return comment\n                })\n            }else {\n                return state\n            }\n\n  \n        case UPVOTE_COMMENT:\n            if(api_voteComment(id, 'upVote')){\n                return state.map(comment => {\n                    if( comment.id === id ) comment.voteScore++\n                    return comment\n                })\n            }else{\n                return state\n            }\n\n        \n        // EDIT COMMENT ================================================\n\n        case DELETE_COMMENT:\n\n            if(api_deleteComment(id)){\n                return state.map(comment => {\n                    if(comment.id === id){\n                        comment.deleted = true\n                    }\n                    return comment\n                })\n            }else{\n                return state\n            }\n\n        case UPDATE_COMMENT:\n\n            if(api_updateComment(id, body, timestamp)){\n                return state.map(comment => {\n                    if(comment.id === id){\n                        comment.body = body;\n                        comment.timestamp = timestamp;\n                    }\n                    return comment\n                })\n            }\n\n            return state\n\n        default:\n            return state\n    }\n  \n  }\n  "]},"metadata":{},"sourceType":"module"}