{"ast":null,"code":"var _jsxFileName = \"/home/aktoriukas/Documents/garrison-test2/frontend/src/components/FullPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { api_votePost, api_getSinglePost, api_getComments } from '../API-calls';\nimport { ADD_POST, UPVOTE_POST, DOWNVOTE_POST, DELETE_POST, UPDATE_POST, RECEIVE_COMMENTS } from '../actions';\nimport CommentForm from './CommentForm';\nimport Vote from './Vote';\nimport Comment from './Comment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FullPost({\n  match\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const id = match.params.id;\n  const posts = useSelector(state => state.posts);\n  const comments = useSelector(state => state.comments);\n  const [post, setPost] = useState([]);\n  const [title, setTitle] = useState(post.title);\n  const [body, setBody] = useState(post.body);\n  const [edit, setEdit] = useState(false);\n  useEffect(() => {\n    // if direct link - get single post, else use store\n    if (posts.length > 0) {\n      posts.forEach(post => {\n        if (post.id === id) {\n          setPost(post);\n          setBody(post.body);\n          setTitle(post.title);\n          return;\n        }\n      });\n    } else {\n      getSinglePost();\n    }\n\n    getComments();\n  }, []);\n\n  const getComments = async () => {\n    const comments = await api_getComments(id);\n    console.log(comments);\n    dispatch({\n      type: RECEIVE_COMMENTS,\n      comments\n    });\n  };\n\n  const getSinglePost = async () => {\n    const post = await api_getSinglePost(id);\n    dispatch({\n      type: ADD_POST,\n      post\n    });\n    setPost(post);\n    setBody(post.body);\n    setTitle(post.title);\n  };\n\n  const handleClick = action => {\n    switch (action) {\n      case 'upVote':\n        dispatch({\n          type: UPVOTE_POST,\n          id\n        });\n        break;\n\n      case 'downVote':\n        dispatch({\n          type: DOWNVOTE_POST,\n          id\n        });\n        break;\n\n      case 'delete':\n        dispatch({\n          type: DELETE_POST,\n          id\n        });\n        break;\n\n      case 'edit-save':\n        dispatch({\n          type: UPDATE_POST,\n          id,\n          title,\n          body\n        });\n        setEdit(false);\n\n      default:\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: post.deleted === false ? /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [edit ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setBody(e.target.value),\n          value: body,\n          placeholder: \"post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setTitle(e.target.value),\n          value: title,\n          placeholder: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleClick('edit-save'),\n          children: \"save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Vote, {\n        handleClick: handleClick,\n        score: post.voteScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick('delete'),\n        children: \"delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setEdit(true),\n        children: \"edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), comments.map(comment => {\n        if (!comment.deleted) return /*#__PURE__*/_jsxDEV(Comment, {\n          comment: comment\n        }, comment.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 53\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(CommentForm, {\n        parentId: id || match.params.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this) : ''\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FullPost, \"D5i0aiWQ6p9mnd8FUbiOrt3xSzk=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = FullPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"FullPost\");","map":{"version":3,"sources":["/home/aktoriukas/Documents/garrison-test2/frontend/src/components/FullPost.js"],"names":["React","useEffect","useState","useSelector","useDispatch","api_votePost","api_getSinglePost","api_getComments","ADD_POST","UPVOTE_POST","DOWNVOTE_POST","DELETE_POST","UPDATE_POST","RECEIVE_COMMENTS","CommentForm","Vote","Comment","FullPost","match","dispatch","id","params","posts","state","comments","post","setPost","title","setTitle","body","setBody","edit","setEdit","length","forEach","getSinglePost","getComments","console","log","type","handleClick","action","deleted","e","target","value","voteScore","map","comment"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { api_votePost, api_getSinglePost, api_getComments } from '../API-calls'\n\nimport { ADD_POST, \n    UPVOTE_POST,\n    DOWNVOTE_POST,\n    DELETE_POST,\n    UPDATE_POST,\n    RECEIVE_COMMENTS } from '../actions'\n\nimport CommentForm from './CommentForm'\nimport Vote from './Vote'\nimport Comment from './Comment'\n\nexport default function FullPost( { match } ) {\n\n    const dispatch = useDispatch()\n    const id = match.params.id\n    const posts = useSelector(state => state.posts)\n    const comments = useSelector(state => state.comments)\n    const [post, setPost] = useState([])\n    const [title, setTitle] = useState(post.title)\n    const [body, setBody] = useState(post.body)\n    const [edit, setEdit] = useState(false)\n    \n    useEffect(() => {\n\n        // if direct link - get single post, else use store\n        if(posts.length > 0){\n            posts.forEach(post => {\n                if(post.id === id) {\n                    setPost(post)\n                    setBody(post.body)\n                    setTitle(post.title)\n                    return\n                } \n            });\n        }else{\n            getSinglePost()\n        }\n        getComments()\n    }, [])\n\n    const getComments = async () => {\n        const comments = await api_getComments(id)\n        console.log(comments)\n        dispatch({type: RECEIVE_COMMENTS, comments })\n    }\n\n    const getSinglePost = async () => {\n        const post = await api_getSinglePost(id)\n        dispatch({type: ADD_POST, post })\n        setPost(post)\n        setBody(post.body)\n        setTitle(post.title)\n    }\n    const handleClick = (action) => {\n\n        switch(action){\n            case 'upVote':\n                dispatch({type: UPVOTE_POST, id})\n                break\n\n            case 'downVote':\n                dispatch({type: DOWNVOTE_POST, id})\n                break\n\n            case 'delete':\n                dispatch({type: DELETE_POST, id})\n                break\n\n            case 'edit-save':\n                dispatch({type: UPDATE_POST, id, title, body})\n                setEdit(false)\n            default:\n                break\n        }\n    }\n\n    return (\n        <div>\n            {post.deleted === false ?\n            \n            <li>\n    \n                {edit?\n                    <>\n                        <input \n                            onChange={e => setBody(e.target.value)}\n                            value={body} \n                            placeholder='post' />\n                        <input \n                            onChange={e => setTitle(e.target.value)}\n                            value={title} \n                            placeholder='title' />\n                        <button\n                            onClick={() => handleClick('edit-save')}\n                        >save\n                        </button>\n                    </>\n                    :\n                    <>\n                        <h3>{post.title}</h3>\n                        <p>{post.body}</p>\n                    </>\n                }\n    \n    \n                <Vote handleClick={handleClick} score={post.voteScore} />\n    \n                <button onClick={() => handleClick('delete')}>delete</button>\n                <button onClick={() => setEdit(true)}>edit</button>\n    \n                \n                    {comments.map(comment => {\n                        if(!comment.deleted) return <Comment \n                                                            key={comment.id} \n                                                            comment={comment}/>\n                        })}\n\n                    <CommentForm parentId={id || match.params.id}/>\n        \n            </li>\n            :\n            ''\n            }\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}