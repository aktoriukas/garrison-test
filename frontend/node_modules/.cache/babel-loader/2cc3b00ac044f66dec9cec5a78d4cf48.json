{"ast":null,"code":"import axios from 'axios';\nconst url = \"http://localhost:3001\";\nconst authorization = {\n  Authorization: \"garrison\"\n};\nexport const api_getAllPosts = async () => {\n  try {\n    const params = {\n      headers: authorization\n    };\n    const response = await axios.get(`${url}/posts`, params);\n    return [...response.data];\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const api_getCategories = async () => {\n  try {\n    const params = {\n      headers: authorization\n    };\n    const response = await axios.get(`${url}/categories`, params);\n    return [...response.data.categories];\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const api_getPostByCategory = async category => {\n  try {} catch (err) {\n    console.log(err);\n  }\n};\nexport const api_getSinglePost = async id => {\n  try {\n    const params = {\n      headers: authorization\n    };\n    const response = await axios.get(`${url}/posts/${id}`, params);\n    return response.data;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const api_getComments = async id => {\n  try {\n    const params = {\n      headers: authorization\n    };\n    const response = await axios.get(`${url}/posts/${id}/comments`, params);\n    return [...response.data];\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const api_addComment = async ({\n  id,\n  timestamp,\n  body,\n  author,\n  parentId\n}) => {\n  try {\n    const response = await axios({\n      method: 'post',\n      url: `${url}/comments`,\n      headers: authorization,\n      data: {\n        id,\n        timestamp,\n        body,\n        author,\n        parentId\n      }\n    });\n    console.log(response);\n    return response;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const api_votePost = async (id, action) => {\n  try {\n    const response = await axios({\n      method: 'post',\n      url: `${url}/posts/${id}`,\n      headers: authorization,\n      data: {\n        option: action\n      }\n    });\n    return response;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const api_voteComment = async (id, action) => {\n  try {\n    const response = await axios({\n      method: 'post',\n      url: `${url}/comments/${id}`,\n      headers: authorization,\n      data: {\n        option: action\n      }\n    });\n    return response;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const api_deleteComment = async id => {\n  try {\n    const response = await axios({\n      method: 'delete',\n      url: `${url}/comments/${id}`,\n      headers: authorization\n    });\n    return response;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const api_updateComment = async (id, body, timestamp) => {\n  try {\n    console.log(id);\n    console.log(body);\n    console.log(timestamp);\n    const response = await axios({\n      method: 'put',\n      url: `${url}/comments/${id}`,\n      headers: authorization,\n      data: {\n        body,\n        timestamp\n      }\n    });\n    console.log(response);\n    return response;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const api_deletePost = async id => {\n  try {\n    const response = await axios({\n      method: 'delete',\n      url: `${url}/posts/${id}`,\n      headers: authorization\n    });\n    return response;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const api_updatePost = async (id, title, body) => {\n  try {\n    const response = await axios({\n      method: 'put',\n      url: `${url}/posts/${id}`,\n      headers: authorization,\n      data: {\n        title,\n        body\n      }\n    });\n    return response;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const api_addPost = async ({\n  id,\n  timestamp,\n  title,\n  body,\n  author,\n  category\n}) => {\n  try {\n    const response = await axios({\n      method: 'post',\n      url: `${url}/posts`,\n      headers: authorization,\n      data: {\n        id,\n        timestamp,\n        title,\n        body,\n        author,\n        category\n      }\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"sources":["/home/aktoriukas/Documents/garrison-test2/frontend/src/API-calls/index.js"],"names":["axios","url","authorization","Authorization","api_getAllPosts","params","headers","response","get","data","err","console","log","api_getCategories","categories","api_getPostByCategory","category","api_getSinglePost","id","api_getComments","api_addComment","timestamp","body","author","parentId","method","api_votePost","action","option","api_voteComment","api_deleteComment","api_updateComment","api_deletePost","api_updatePost","title","api_addPost"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\n\nconst url = \"http://localhost:3001\";\nconst authorization = { Authorization: \"garrison\" }\n\nexport const api_getAllPosts = async () => {\n\n    try{\n        const params = {\n            headers: authorization\n        }\n    \n        const response = await axios.get(`${url}/posts`, params)\n        return [...response.data]\n\n    }catch (err) {console.log(err)}\n} \n\nexport const api_getCategories = async () => {\n    try{\n        const params = {\n            headers: authorization\n        }\n        const response = await axios.get(`${url}/categories`, params)\n        return [...response.data.categories]\n    }catch (err) {console.log(err)}\n}\n\nexport const api_getPostByCategory = async (category) => {\n    try{\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_getSinglePost = async (id) => {\n\n    try{\n        const params = {\n            headers: authorization\n        }\n    \n        const response = await axios.get(`${url}/posts/${id}`, params)\n        return response.data\n    }\n    catch (err) {console.log(err)}\n\n}\n\nexport const api_getComments = async (id) => {\n\n    try{\n        const params = {\n            headers: authorization\n        }\n        const response = await axios.get(`${url}/posts/${id}/comments`, params)\n        return [...response.data]        \n    }\n    catch (err) { console.log(err) }\n\n}\n\nexport const api_addComment = async ({id, timestamp, body, author, parentId}) => {\n\n    try{\n        const response = await axios({\n            method: 'post',\n            url:`${url}/comments`,\n            headers: authorization,\n            data: {\n                id, \n                timestamp, \n                body, \n                author, \n                parentId}\n        })\n        console.log(response)\n        return response\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_votePost = async (id, action) => {\n\n    try{\n        const response = await axios({\n            method: 'post',\n            url:`${url}/posts/${id}`,\n            headers: authorization,\n            data: { option: action }\n        })\n        return response\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_voteComment = async (id, action) => {\n\n    try{\n        const response = await axios({\n            method: 'post',\n            url:`${url}/comments/${id}`,\n            headers: authorization,\n            data: { option: action }\n        })\n        return response\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_deleteComment = async (id) => {\n\n    try{\n        const response = await axios({\n            method: 'delete',\n            url:`${url}/comments/${id}`,\n            headers: authorization\n        })\n        return response\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_updateComment = async (id, body, timestamp) => {\n\n    try{\n        console.log(id)\n        console.log(body)\n        console.log(timestamp)\n        const response = await axios({\n            method: 'put',\n            url:`${url}/comments/${id}`,\n            headers: authorization,\n            data:{body, timestamp}\n        })\n        console.log(response)\n        return response\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_deletePost = async (id) => {\n\n    try{\n        const response = await axios({\n            method: 'delete',\n            url:`${url}/posts/${id}`,\n            headers: authorization\n        })\n        return response\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_updatePost = async (id, title, body) => {\n\n    try{\n        const response = await axios({\n            method: 'put',\n            url: `${url}/posts/${id}`,\n            headers: authorization,\n            data: { title, body}\n        })\n        return response\n\n    }catch (err) {console.log(err)}\n}\n\nexport const api_addPost = async ( { id, timestamp, title, body, author, category } ) => {\n\n    try{\n\n        const response = await axios({\n            method: 'post',\n            url: `${url}/posts`,\n            headers: authorization,\n            data: {\n                id,\n                timestamp,\n                title,\n                body,\n                author,\n                category\n            }\n        })\n\n    }catch (err) {console.log(err)}\n}"]},"metadata":{},"sourceType":"module"}