{"ast":null,"code":"var _jsxFileName = \"/home/aktoriukas/Documents/garrison-test2/frontend/src/components/Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { api_getSinglePost, api_getComments, api_votePost } from '../API-calls';\nimport { UPVOTE_POST, DOWNVOTE_POST, DELETE_POST, UPDATE_POST, RECEIVE_COMMENTS } from '../actions';\nimport { Link } from 'react-router-dom';\nimport Vote from './Vote';\nimport Comment from './Comment';\nimport CommentForm from './CommentForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Post({\n  match,\n  id\n}) {\n  _s();\n\n  const [post, setPost] = useState([]); // const [comments, setComments] = useState(false)\n\n  const dispatch = useDispatch();\n  const comments = useSelector(state => {\n    console.log(state);\n    return state.comment;\n  });\n  useEffect(() => {\n    getSinglePost();\n    if (match) getComments();\n  }, []);\n\n  const handleClick = async action => {\n    switch (action) {\n      case 'downVote':\n        if (api_votePost(id || match.params.id, action)) dispatch({\n          type: DOWNVOTE_POST,\n          id: post.id\n        });\n        break;\n\n      case 'upVote':\n        if (api_votePost(id || match.params.id, action)) dispatch({\n          type: UPVOTE_POST,\n          id: post.id\n        });\n        break;\n\n      case 'delete':\n        // if(api_deletePost(url, post.id)) dispatch({type: DELETE_POST, id: post.id})\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  console.log(comments);\n\n  const getSinglePost = async () => {\n    const post = await api_getSinglePost(id || match.params.id);\n    setPost(post);\n  };\n\n  const getComments = async () => {\n    const comments = await api_getComments(match.params.id);\n    console.log(comments);\n    dispatch({\n      type: RECEIVE_COMMENTS,\n      comments: comments\n    }); // setComments(comments)\n\n    return;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: post.deleted === false ? /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Vote, {\n        handleClick: handleClick,\n        score: post.voteScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), comments ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [comments.map(comment => {\n          if (!comment.deleted) return /*#__PURE__*/_jsxDEV(Comment, {\n            comment: comment\n          }, comment.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 61\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(CommentForm, {\n          parentId: id || match.params.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Link, {\n        to: `/${post.category}/${post.id}`,\n        children: \"link\"\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this) : ''\n  }, void 0, false);\n}\n\n_s(Post, \"Eel4fvVtljZFYUm0RSWBvKHXi9g=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/home/aktoriukas/Documents/garrison-test2/frontend/src/components/Post.js"],"names":["React","useEffect","useState","useSelector","useDispatch","api_getSinglePost","api_getComments","api_votePost","UPVOTE_POST","DOWNVOTE_POST","DELETE_POST","UPDATE_POST","RECEIVE_COMMENTS","Link","Vote","Comment","CommentForm","Post","match","id","post","setPost","dispatch","comments","state","console","log","comment","getSinglePost","getComments","handleClick","action","params","type","deleted","title","body","voteScore","map","category"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { \n    api_getSinglePost, \n    api_getComments, \n    api_votePost } from '../API-calls'\n\nimport { \n    UPVOTE_POST,\n    DOWNVOTE_POST,\n    DELETE_POST,\n    UPDATE_POST,\n    RECEIVE_COMMENTS } from '../actions'\n    \nimport { Link } from 'react-router-dom'\n\nimport Vote from './Vote'\nimport Comment from './Comment'\nimport CommentForm from './CommentForm'\n\nexport default function Post({ match, id  }) {\n\n    const [post, setPost] = useState([])\n    // const [comments, setComments] = useState(false)\n    const dispatch = useDispatch()\n    const comments = useSelector(state => {\n        console.log(state)\n        return state.comment\n    })\n\n    useEffect(() => {\n\n        getSinglePost()\n        if(match) getComments()\n        \n    }, [])\n\n    const handleClick = async (action) => {\n        switch (action){\n\n            case 'downVote':\n                if(api_votePost(id || match.params.id, action)) dispatch({type: DOWNVOTE_POST, id: post.id})\n                break\n\n            case 'upVote':\n                if(api_votePost(id || match.params.id, action)) dispatch({type: UPVOTE_POST, id: post.id})\n                break\n\n            case 'delete':\n                // if(api_deletePost(url, post.id)) dispatch({type: DELETE_POST, id: post.id})\n                break\n\n            default:\n                return\n        }\n    }\n\n    console.log(comments)\n    const getSinglePost = async () => {\n\n        const post = await api_getSinglePost(id || match.params.id)\n        setPost(post)\n    }\n    const getComments = async () => {\n        const comments = await api_getComments(match.params.id)\n        console.log(comments)\n        dispatch({ type: RECEIVE_COMMENTS, comments: comments})\n        // setComments(comments)\n        return\n    }\n\n\n    return (\n        <>\n            {post.deleted === false ?\n            \n                <li>\n        \n                    <h3>{post.title}</h3>\n        \n                    <p>{post.body}</p>\n        \n                    <Vote handleClick={handleClick} score={post.voteScore} />\n        \n                    <button>delete</button>\n                    <button>edit</button>\n        \n                    {comments ?\n                        <>\n                            {comments.map(comment => {\n                                if(!comment.deleted) return <Comment \n                                                                key={comment.id} \n                                                                comment={comment}/>\n                            })}\n\n                            <CommentForm parentId={id || match.params.id}/>\n                        </>\n                        :\n                        <Link key={post.id} to={`/${post.category}/${post.id}`}>\n                            link\n                        </Link>\n\n                    }\n                </li>\n            :\n            ''\n            }\n        </>\n\n    )\n}\n"]},"metadata":{},"sourceType":"module"}