{"ast":null,"code":"var _jsxFileName = \"/home/aktoriukas/Documents/garrison-test/frontend/src/components/FullPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { api_votePost, api_getSinglePost, api_getComments } from '../API-calls';\nimport { Link } from 'react-router-dom';\nimport { ADD_POST, UPVOTE_POST, DOWNVOTE_POST, DELETE_POST, UPDATE_POST, RECEIVE_COMMENTS, UPVOTE_COMMENT, DOWNVOTE_COMMENT, DELETE_COMMENT, UPDATE_COMMENT } from '../actions';\nimport CommentForm from './CommentForm';\nimport Vote from './Vote';\nimport Comment from './Comment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FullPost({\n  match\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const id = match.params.id;\n  const posts = useSelector(state => state.posts);\n  const comments = useSelector(state => state.comments);\n  const [post, setPost] = useState([]);\n  const [title, setTitle] = useState(post.title);\n  const [body, setBody] = useState(post.body);\n  const [edit, setEdit] = useState(false);\n  useEffect(() => {\n    // if direct link - get single post, else use store\n    if (posts.length > 0) {\n      posts.forEach(post => {\n        if (post.id === id) {\n          setPost(post);\n          setBody(post.body);\n          setTitle(post.title);\n          return;\n        }\n      });\n    } else {\n      getSinglePost();\n    }\n\n    getComments();\n  }, []);\n\n  const getComments = async () => {\n    const comments = await api_getComments(id);\n    dispatch({\n      type: RECEIVE_COMMENTS,\n      comments\n    });\n  };\n\n  const getSinglePost = async () => {\n    const post = await api_getSinglePost(id);\n    dispatch({\n      type: ADD_POST,\n      post\n    });\n    setPost(post);\n    setBody(post.body);\n    setTitle(post.title);\n  };\n\n  const handleClick = (action, type, commentID, timestamp, body) => {\n    switch (action) {\n      case 'upVote':\n        if (type === 'post') dispatch({\n          type: UPVOTE_POST,\n          id\n        });\n        if (type === 'comment') dispatch({\n          type: UPVOTE_COMMENT,\n          id: commentID\n        });\n        break;\n\n      case 'downVote':\n        console.log(commentID);\n        if (type === 'post') dispatch({\n          type: DOWNVOTE_POST,\n          id\n        });\n        if (type === 'comment') dispatch({\n          type: DOWNVOTE_COMMENT,\n          id: commentID\n        });\n        break;\n\n      case 'delete':\n        if (type === 'post') dispatch({\n          type: DELETE_POST,\n          id\n        });\n        if (type === 'comment') dispatch({\n          type: DELETE_COMMENT,\n          id: commentID\n        });\n        break;\n\n      case 'edit-save':\n        if (type === 'post') {\n          dispatch({\n            type: UPDATE_POST,\n            id,\n            title,\n            body\n          });\n          setEdit(false);\n        }\n\n        if (type === 'comment') {\n          dispatch({\n            type: UPDATE_COMMENT,\n            id: commentID,\n            body,\n            timestamp\n          });\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return post.deleted === false ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-container\",\n    children: [edit ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setBody(e.target.value),\n        value: body,\n        placeholder: \"post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setTitle(e.target.value),\n        value: title,\n        placeholder: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick('edit-save', 'post'),\n        children: \"save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: [/*#__PURE__*/_jsxDEV(Vote, {\n        type: \"post\",\n        handleClick: handleClick,\n        score: post.voteScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick('delete', 'post'),\n        children: \"delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setEdit(true),\n        children: \"edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }, this), comments.map(comment => {\n      if (!comment.deleted) return /*#__PURE__*/_jsxDEV(Comment, {\n        handleClick: handleClick,\n        comment: comment\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 29\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(CommentForm, {\n      deleted: post.deleted,\n      parentId: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: \"go to all posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 13\n  }, this) : '';\n}\n\n_s(FullPost, \"D5i0aiWQ6p9mnd8FUbiOrt3xSzk=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = FullPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"FullPost\");","map":{"version":3,"sources":["/home/aktoriukas/Documents/garrison-test/frontend/src/components/FullPost.js"],"names":["React","useEffect","useState","useSelector","useDispatch","api_votePost","api_getSinglePost","api_getComments","Link","ADD_POST","UPVOTE_POST","DOWNVOTE_POST","DELETE_POST","UPDATE_POST","RECEIVE_COMMENTS","UPVOTE_COMMENT","DOWNVOTE_COMMENT","DELETE_COMMENT","UPDATE_COMMENT","CommentForm","Vote","Comment","FullPost","match","dispatch","id","params","posts","state","comments","post","setPost","title","setTitle","body","setBody","edit","setEdit","length","forEach","getSinglePost","getComments","type","handleClick","action","commentID","timestamp","console","log","deleted","e","target","value","voteScore","map","comment"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { api_votePost, api_getSinglePost, api_getComments } from '../API-calls'\nimport { Link } from 'react-router-dom'\n\nimport { ADD_POST, \n    UPVOTE_POST,\n    DOWNVOTE_POST,\n    DELETE_POST,\n    UPDATE_POST,\n    RECEIVE_COMMENTS,\n    UPVOTE_COMMENT,\n    DOWNVOTE_COMMENT,\n    DELETE_COMMENT,\n    UPDATE_COMMENT} from '../actions'\n\nimport CommentForm from './CommentForm'\nimport Vote from './Vote'\nimport Comment from './Comment'\n\nexport default function FullPost( { match } ) {\n\n    const dispatch = useDispatch()\n    const id = match.params.id\n    const posts = useSelector(state => state.posts)\n    const comments = useSelector(state => state.comments)\n    const [post, setPost] = useState([])\n    const [title, setTitle] = useState(post.title)\n    const [body, setBody] = useState(post.body)\n    const [edit, setEdit] = useState(false)\n    \n    useEffect(() => {\n\n        // if direct link - get single post, else use store\n        if(posts.length > 0){\n            posts.forEach(post => {\n                if(post.id === id) {\n                    setPost(post)\n                    setBody(post.body)\n                    setTitle(post.title)\n                    return\n                } \n            });\n        }else{\n            getSinglePost()\n        }\n        getComments()\n    }, [])\n\n    const getComments = async () => {\n        const comments = await api_getComments(id)\n        dispatch({type: RECEIVE_COMMENTS, comments })\n    }\n\n    const getSinglePost = async () => {\n        const post = await api_getSinglePost(id)\n        dispatch({type: ADD_POST, post })\n        setPost(post)\n        setBody(post.body)\n        setTitle(post.title)\n    }\n    const handleClick = (action, type, commentID, timestamp, body) => {\n\n        switch(action){\n            case 'upVote':\n                if(type === 'post') dispatch({type: UPVOTE_POST, id})\n                if(type === 'comment') dispatch({type: UPVOTE_COMMENT, id: commentID})\n                break\n\n            case 'downVote':\n                console.log(commentID)\n                if(type === 'post') dispatch({type: DOWNVOTE_POST, id})\n                if(type === 'comment') dispatch({type: DOWNVOTE_COMMENT, id: commentID})\n                break\n\n            case 'delete':\n                if(type === 'post') dispatch({type: DELETE_POST, id})\n                if(type === 'comment') dispatch({type: DELETE_COMMENT, id: commentID})\n                break\n\n            case 'edit-save':\n                if(type === 'post') {\n                    dispatch({type: UPDATE_POST, id, title, body})\n                    setEdit(false)\n                } \n                if(type === 'comment') {\n                    dispatch({type: UPDATE_COMMENT, id: commentID, body, timestamp})\n                }\n                break\n\n            default:\n                break\n        }\n    }\n\n    return (\n\n            post.deleted === false ?\n            \n            <div className='post-container'>\n    \n                {edit?\n                    <div>\n                        <input \n                            onChange={e => setBody(e.target.value)}\n                            value={body} \n                            placeholder='post' />\n                        <input \n                            onChange={e => setTitle(e.target.value)}\n                            value={title} \n                            placeholder='title' />\n                        <button\n                            onClick={() => handleClick('edit-save', 'post')}\n                        >save\n                        </button>\n                    </div>\n                    :\n                    <>\n                        <h3>{post.title}</h3>\n                        <p>{post.body}</p>\n                    </>\n                }\n    \n                <div className='options'>\n                    <Vote type='post' handleClick={handleClick} score={post.voteScore} />\n        \n                    <button onClick={() => handleClick('delete', 'post')}>delete</button>\n                    <button onClick={() => setEdit(true)}>edit</button>\n                </div>\n    \n                \n                    {comments.map(comment => {\n                        if(!comment.deleted) return (\n                            <Comment \n                                handleClick={handleClick}\n                                key={comment.id} \n                                comment={comment}/>\n                        )\n                        })}\n\n                    <CommentForm \n                        deleted={post.deleted} \n                        parentId={id}/>\n                <Link to='/'>go to all posts</Link>\n\n            </div>\n            :\n            ''\n            \n    )\n}\n"]},"metadata":{},"sourceType":"module"}